// <auto-generated />
using System;
using LABCC.BackEnd.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LABCC.BackEnd.Infrastructure.Migrations
{
    [DbContext(typeof(MsSqlContext))]
    [Migration("20230624180346_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Entity")
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LABCC.BackEnd.Domain.Entities.Usuarios.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0)
                        .HasComment("Identificador do usuário");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AtualizadoEm")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("SYSUTCDATETIME()")
                        .HasComment("Momento em que o usuário foi atualizado");

                    b.Property<string>("CpfOuCnpj")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18)")
                        .HasColumnOrder(1)
                        .HasComment("É o documento do usuário (CPF ou CNPJ), apenas digitos numéricos.");

                    b.Property<DateTimeOffset>("CriadoEm")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("SYSUTCDATETIME()")
                        .HasComment("Momento em que o usuário foi criado");

                    b.Property<DateTime>("DataDeNascimento")
                        .HasColumnType("date")
                        .HasColumnOrder(4)
                        .HasComment("Data de Nascimento do usuário");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("Email do usuário");

                    b.Property<byte>("GeneroId")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(6)
                        .HasComment("Gênero do usuário: 1 - Masculino, 2 - Feminino, 3 - Outro");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3)
                        .HasComment("Nome do usuário");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(10)
                        .HasComment("Status do usuário: 0 - Inativo, 1 - Ativo");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnOrder(5)
                        .HasComment("Telefone do usuário");

                    b.Property<byte>("TipoDeUsuarioId")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(7)
                        .HasComment("Tipo do usuário: 1 - Administrador, 2 - Gerente, 3 - Criador, 4 - Outro");

                    b.HasKey("Id");

                    b.HasIndex("CpfOuCnpj")
                        .IsUnique();

                    b.HasIndex("Email");

                    b.HasIndex("GeneroId");

                    b.HasIndex("Nome");

                    b.HasIndex("StatusId");

                    b.HasIndex("TipoDeUsuarioId");

                    b.ToTable("Usuarios", "Entity");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AtualizadoEm = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CpfOuCnpj = "278.656.291-09",
                            CriadoEm = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataDeNascimento = new DateTime(2000, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lucas_diego@gimail.com",
                            GeneroId = (byte)1,
                            Nome = "Lucas Diego Santos",
                            StatusId = (byte)1,
                            Telefone = "(63) 99729-3374",
                            TipoDeUsuarioId = (byte)1
                        },
                        new
                        {
                            Id = 2L,
                            AtualizadoEm = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CpfOuCnpj = "121.682.363-48",
                            CriadoEm = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataDeNascimento = new DateTime(2001, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marcos.mateus.campos@doublesp.com.br",
                            GeneroId = (byte)1,
                            Nome = "Marcos Mateus Anthony Campos",
                            StatusId = (byte)1,
                            Telefone = "(75) 99404-5248",
                            TipoDeUsuarioId = (byte)4
                        },
                        new
                        {
                            Id = 3L,
                            AtualizadoEm = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CpfOuCnpj = "493.617.515-30",
                            CriadoEm = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataDeNascimento = new DateTime(1954, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mirella_beatriz_lima@engeseg.com.br",
                            GeneroId = (byte)2,
                            Nome = "Mirella Beatriz Lima",
                            StatusId = (byte)1,
                            Telefone = "(62) 98420-9876",
                            TipoDeUsuarioId = (byte)1
                        },
                        new
                        {
                            Id = 4L,
                            AtualizadoEm = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CpfOuCnpj = "864.306.046-16",
                            CriadoEm = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataDeNascimento = new DateTime(1996, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "antonio_carlos_dias@lukin4.com.br",
                            GeneroId = (byte)3,
                            Nome = "Antonio Carlos Eduardo Dias",
                            StatusId = (byte)0,
                            Telefone = "(65) 99579-0748",
                            TipoDeUsuarioId = (byte)2
                        },
                        new
                        {
                            Id = 5L,
                            AtualizadoEm = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CpfOuCnpj = "945.981.184-15",
                            CriadoEm = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataDeNascimento = new DateTime(1998, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kamilly.antonia.almeida@onset.com.br",
                            GeneroId = (byte)2,
                            Nome = "Kamilly Antônia Almeida",
                            StatusId = (byte)1,
                            Telefone = "(93) 98644-1270",
                            TipoDeUsuarioId = (byte)3
                        });
                });

            modelBuilder.Entity("LABCC.BackEnd.Domain.ValueObjects.Genero", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasColumnType("char")
                        .HasColumnOrder(1)
                        .HasComment("É a letra que representa o gênero.");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18)")
                        .HasColumnOrder(2)
                        .HasComment("É o nome do gênero.");

                    b.HasKey("Id");

                    b.HasIndex("Letter")
                        .IsUnique();

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("Generos", "VO");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Letter = "M",
                            Value = "Masculino"
                        },
                        new
                        {
                            Id = (byte)2,
                            Letter = "F",
                            Value = "Feminino"
                        },
                        new
                        {
                            Id = (byte)3,
                            Letter = "O",
                            Value = "Outro"
                        });
                });

            modelBuilder.Entity("LABCC.BackEnd.Domain.ValueObjects.Status", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18)")
                        .HasColumnOrder(0)
                        .HasComment("É o valor do status.");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("Status", "VO");

                    b.HasData(
                        new
                        {
                            Id = (byte)0,
                            Value = "Inativo"
                        },
                        new
                        {
                            Id = (byte)1,
                            Value = "Ativo"
                        });
                });

            modelBuilder.Entity("LABCC.BackEnd.Domain.ValueObjects.TipoDeUsuario", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("varchar(18)")
                        .HasColumnOrder(1)
                        .HasComment("É a sigla que representa o tipo de usuário.");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18)")
                        .HasColumnOrder(2)
                        .HasComment("É o nome do tipo de usuário.");

                    b.HasKey("Id");

                    b.HasIndex("Sigla")
                        .IsUnique();

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("TiposDeUsuario", "VO");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Sigla = "ADM",
                            Value = "Administrador"
                        },
                        new
                        {
                            Id = (byte)2,
                            Sigla = "GRT",
                            Value = "Gerente"
                        },
                        new
                        {
                            Id = (byte)3,
                            Sigla = "CRD",
                            Value = "Criador"
                        },
                        new
                        {
                            Id = (byte)4,
                            Sigla = "OTR",
                            Value = "Outro"
                        });
                });

            modelBuilder.Entity("LABCC.BackEnd.Domain.Entities.Usuarios.Usuario", b =>
                {
                    b.HasOne("LABCC.BackEnd.Domain.ValueObjects.Genero", "Genero")
                        .WithMany()
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LABCC.BackEnd.Domain.ValueObjects.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LABCC.BackEnd.Domain.ValueObjects.TipoDeUsuario", "TipoDeUsuario")
                        .WithMany()
                        .HasForeignKey("TipoDeUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genero");

                    b.Navigation("Status");

                    b.Navigation("TipoDeUsuario");
                });
#pragma warning restore 612, 618
        }
    }
}
